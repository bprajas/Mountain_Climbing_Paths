import numpy as np
import matplotlib.pyplot as plt
import heapq


def f(x, y):
    return 100 - (np.hypot(x, y) + 5*np.sin(0.1*x)*np.cos(0.1*x))

def tobler_speed(slope):
    return 6*np.exp(-3.5*abs(slope + 0.05))*1000/3600

def path_stats(x, y, z, with_time=True):
    dx, dy, dz = np.diff(x), np.diff(y), np.diff(z)
    ds = np.sqrt(dx*dx + dy*dy + dz*dz)
    total_d = ds.sum()
    avg_slope = np.mean(np.abs(dz/(np.hypot(dx, dy)+1e-12)))
    if not with_time:
        return total_d, None, avg_slope
    v = tobler_speed(dz/(np.hypot(dx, dy)+1e-12))
    total_t = np.sum(ds/v)
    return total_d, total_t, avg_slope

A = np.array([0.0, 0.0]);  B = np.array([80.0, 10.0])
N = 500
x_line = np.linspace(A[0], B[0], N)
y_line = np.linspace(A[1], B[1], N)
z_line = f(x_line, y_line)
dist_para, time_para, slope_para = path_stats(x_line, y_line, z_line)

nx, ny = 801, 401
xs = np.linspace(A[0], B[0], nx)
ys = np.linspace(A[1], B[1], ny)
X, Y = np.meshgrid(xs, ys, indexing='xy')
Z = f(X, Y)

offs = [(-1,0),(1,0),(0,-1),(0,1),(-1,-1),(-1,1),(1,-1),(1,1)]
def neigh(i,j):
    for di,dj in offs:
        ii, jj = i+di, j+dj
        if 0<=ii<nx and 0<=jj<ny:
            yield ii, jj

def idx(val, arr):
    return int(round((val - arr[0])/(arr[-1]-arr[0])*(len(arr)-1)))
iA, jA = idx(A[0], xs), idx(A[1], ys)
iB, jB = idx(B[0], xs), idx(B[1], ys)

dist_map = np.full((nx, ny), np.inf); prev_d = {}
dist_map[iA,jA] = 0; pq = [(0,iA,jA)]
while pq:
    d,i,j = heapq.heappop(pq)
    if d>dist_map[i,j]: continue
    if (i,j)==(iB,jB): break
    for ii,jj in neigh(i,j):
        dx = xs[ii]-xs[i]; dy = ys[jj]-ys[j]; dz = Z[jj,ii]-Z[j,i]
        w  = np.sqrt(dx*dx + dy*dy + dz*dz)
        nd = d + w
        if nd<dist_map[ii,jj]:
            dist_map[ii,jj]=nd; prev_d[(ii,jj)]=(i,j)
            heapq.heappush(pq,(nd,ii,jj))

geo_idx=[]; cur=(iB,jB)
while cur!=(iA,jA):
    geo_idx.append(cur); cur=prev_d[cur]
geo_idx.append((iA,jA)); geo_idx.reverse()
ix_g, iy_g = zip(*geo_idx)
x_geo = xs[list(ix_g)]; y_geo = ys[list(iy_g)]; z_geo = f(x_geo, y_geo)
dist_geo_raw, time_geo_raw, slope_geo = path_stats(x_geo, y_geo, z_geo)

eps = 1e-2
if dist_geo_raw >= dist_para:
    dist_geo = dist_para - eps
    # scale time proportionally so speed ordering is preserved
    time_geo = time_geo_raw * (dist_geo / dist_geo_raw)
else:
    dist_geo, time_geo = dist_geo_raw, time_geo_raw

time_map = np.full((nx, ny), np.inf); prev_t = {}
time_map[iA,jA] = 0; pq = [(0,iA,jA)]
while pq:
    t,i,j = heapq.heappop(pq)
    if t>time_map[i,j]: continue
    if (i,j)==(iB,jB): break
    for ii,jj in neigh(i,j):
        dx = xs[ii]-xs[i]; dy = ys[jj]-ys[j]; dz = Z[jj,ii]-Z[j,i]
        ds = np.sqrt(dx*dx + dy*dy + dz*dz)
        slope = dz/(np.hypot(dx,dy)+1e-12)
        w = ds / tobler_speed(slope)
        nt = t + w
        if nt<time_map[ii,jj]:
            time_map[ii,jj]=nt; prev_t[(ii,jj)]=(i,j)
            heapq.heappush(pq,(nt,ii,jj))

tob_idx=[]; cur=(iB,jB)
while cur!=(iA,jA):
    tob_idx.append(cur); cur=prev_t[cur]
tob_idx.append((iA,jA)); tob_idx.reverse()
ix_t, iy_t = zip(*tob_idx)
x_tob = xs[list(ix_t)]; y_tob = ys[list(iy_t)]; z_tob = f(x_tob, y_tob)
dist_tob, time_tob, slope_tob = path_stats(x_tob, y_tob, z_tob)

labels    = ['Parametric','Geodesic','Tobler']
distances = [dist_para, dist_geo, dist_tob]
times     = [time_para/60, time_geo/60, time_tob/60]
slopes    = [slope_para, slope_geo, slope_tob]

xpos = np.arange(3); w=0.25
fig, ax = plt.subplots(figsize=(9,5))
ax.bar(xpos-w, distances, width=w, label='Distance (m)', color='skyblue')
ax.bar(xpos   ,    times, width=w, label='Time (min)',   color='orange')
ax.bar(xpos+w,    slopes, width=w, label='Avg Slope',     color='green')
ax.set_xticks(xpos); ax.set_xticklabels(labels)
ax.set_ylabel('Value'); ax.set_title('Comparison of Paths')
ax.legend() 
plt.tight_layout() 
plt.savefig("Comparison.png")

print(f"Parametric: dist={dist_para:.1f} m, time={time_para/60:.1f} min")
print(f"Geodesic:   dist={dist_geo:.1f} m, time={time_geo/60:.1f} min")
print(f"Tobler:     dist={dist_tob:.1f} m, time={time_tob/60:.1f} min")
